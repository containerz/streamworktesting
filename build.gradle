task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}


allprojects {

}

    

//the following section is executed only on subprojects, ie. everything except the root project folder
subprojects {

    
    //compiles java and scala source go to .class files under /build/classes
    apply plugin: 'scala'

    apply plugin: 'java'

    
    //send all jars to the root of the project under build/
    tasks.withType(Jar) {
        destinationDir = file("$rootDir/build/")
    }


    repositories {
        mavenCentral()
        
        maven {
            url "https://oss.sonatype.org/content/repositories/public"
        }
        
        maven {
            url "http://packages.confluent.io/maven"
        }

        flatDir {
            dirs '../../deps'
        }

        dependencies {
            compile 'org.slf4j:slf4j-api:1.7.7'
            compile 'org.slf4j:slf4j-log4j12:1.7.7'
        }
    }

}



project("common") {
    
    version = '1.0'

    jar.archiveName = "elodina-common-${version}.jar"

    dependencies {
        compile 'org.scala-lang:scala-library:2.11.5'
        //compile 'io.confluent:kafka-avro-serializer:1.0.1'
        
        compile 'org.apache.kafka:kafka_2.11:0.9.0.0'
        
        //for zipkin
        //compile "com.github.kristofa:brave-core:3.0.0"
        
        compile "org.apache.thrift:libthrift:0.9.3"
        
        //cmd line option parser
        compile 'com.github.scopt:scopt_2.11:3.3.0'
    }

    jar {
        doFirst {
            from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
                exclude "META-INF/*.SF"
                exclude "META-INF/*.DSA"
                exclude "META-INF/*.RSA"
            }
        }
    }

}

project("oneusagov/streamconsumer") {
    
    //starts a jvm with class paths and can tar/zip (requires 'main' or 'mainClassName' set to a main method)
    //apply plugin: 'application'

    
    version = '1.0'
    jar.archiveName = "one-usa-gov-stream-consumer-${version}.jar"

    dependencies {
        compile (project(':common')) {
            exclude group: 'org.slf4j'
        }

        compile 'org.scala-lang:scala-library:2.11.5'
        compile 'com.typesafe:ssl-config-akka_2.11:0.1.2'
        compile 'com.typesafe.akka:akka-http-core-experimental_2.11:2.0.4'
        compile 'com.typesafe.akka:akka-stream-experimental_2.11:2.0.4'
        compile 'org.codehaus.jackson:jackson-jaxrs:1.8.5'

    }
   

    jar {
        doFirst {
            from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
                exclude "META-INF/*.SF"
                exclude "META-INF/*.DSA"
                exclude "META-INF/*.RSA"
            }
        }
        manifest.attributes("Main-Class": "net.elodina.examples.oneusagov.stream.StreamConsumerMain")
    }

    task run(type:JavaExec) {
        main = 'net.elodina.examples.oneusagov.stream.StreamConsumerMain'
        classpath = sourceSets.main.runtimeClasspath
        //systemProperty "log4j.configuration", "file:../config/one-usa-gov.stream-consumer-log4j.properties"
        args "../config/one-usa-gov.stream-consumer.properties"
    }
    

}




